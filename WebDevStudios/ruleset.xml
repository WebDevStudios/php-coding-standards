<?xml version="1.0"?>
<ruleset name="WebDevStudios">
	<!-- See https://github.com/squizlabs/PHP_CodeSniffer/wiki/Annotated-ruleset.xml -->

	<!-- Set a description for this ruleset. -->
	<description>WebDevStudios PHP Coding Standards</description>

	<!-- Include the WordPress-Extra ruleset, with some WDS exclusions. -->
	<rule ref="WordPress-Extra">
		<exclude name="Generic.WhiteSpace.ScopeIndent.IncorrectExact" />
		<exclude name="Generic.WhiteSpace.ScopeIndent.Incorrect" />
		<exclude name="PEAR.Functions.FunctionCallSignature.Indent" />
		<exclude name="WordPress.Files.FileName.NotHyphenatedLowercase" />
		<exclude name="WordPress.Arrays.ArrayDeclarationSpacing.AssociativeKeyFound" />

		<!--
		Allow shorthand array syntax.

		E.g. `[]`.

		WordPress decided to go for `array()` over `[]`. WebDevStudios encourages the use of
		shorthand syntax for readability and simplicity, and discourages use of shorthand
		syntax for it's lack of readability due to it's use of parethensis and function-like
		appearance.

		@since 1.2.2
		@see https://github.com/WordPress/WordPress-Coding-Standards/blob/2.2.0/WordPress-Core/ruleset.xml#L109
		@see Generic.Arrays.DisallowLongArraySyntax.Found (Where we discourage `array()` syntax.)
		-->
		<exclude name="Generic.Arrays.DisallowShortArraySyntax" />
	</rule>

	<!--
	Warn on longform array syntax.

	E.g. array().

	@see   https://github.com/WebDevStudios/php-coding-standards/issues/40
	@since 1.2.2
	@see   WordPress-Extra/Generic.Arrays.DisallowShortArraySyntax (Where we encourage the use of shorthand syntax intead.)

	May error in the future.
	-->
	<rule ref="Generic.Arrays.DisallowLongArraySyntax.Found">
		<type>warning</type>
		<message>Short array syntax should be used to define arrays; in the future, longform syntax will not be used</message>
	</rule>

	<!-- Include WordPress-Docs -->
	<rule ref="WordPress-Docs"/>

	<!-- Doc block alignments -->
	<rule ref="Squiz.Commenting.DocCommentAlignment" />

	<!-- In some cases this isn't possible to catch. -->
	<rule ref="Squiz.PHP.DisallowMultipleAssignments.Found">
		<severity>0</severity>
	</rule>

	<!--
	Support concatenated function calls.

	This allows the following type of function call:

	    thing( 'par1', [
		    'par2array1',
		    'par2array2',
	    ] );


	...which WPCS usually makes you do:

	    $array = [
		    'par2array1',
		    'par2array2',
	    ];

	    thing( 'par1', $array );

	We commonly use condensed functions in themes, so let's keep them around.

	@since 1.2.0 (wds-coding-standards)
	@author Aubrey Portwood <aubrey@webdevstudios.com>
	-->
	<rule ref="PEAR.Functions.FunctionCallSignature">
	  <properties>
	    <property name="requiredSpacesAfterOpen" value="1"/>
	    <property name="requiredSpacesBeforeClose" value="1"/>
	  </properties>
	  <severity>0</severity>
	</rule>

	<!--
	Supports the concatenated function calls above.

	@since 1.2.0 (wds-coding-standards)
	@author Aubrey Portwood <aubrey@webdevstudios.com>
	-->
	<rule ref="PEAR.Functions.FunctionCallSignature.SpaceAfterOpenBracket" />
	<rule ref="PEAR.Functions.FunctionCallSignature.SpaceBeforeCloseBracket" />
</ruleset>
